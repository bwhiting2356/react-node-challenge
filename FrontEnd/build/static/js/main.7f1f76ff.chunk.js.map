{"version":3,"sources":["store/actions.js","SpinnerSection.js","TrackList.js","TrackDetails.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["fetchSelectedTrackSuccess","track","type","payload","parseTracks","tracksObj","Object","keys","map","key","id","SpinnerSection","Segment","data-testid","padded","Dimmer","active","inverted","Loader","TrackTable","trackList","selectedTrackId","selectTrack","Table","celled","Header","Row","HeaderCell","Body","artist","track_title","className","onClick","Cell","connect","state","fetching","fetchingTrackList","fetchTrackList","dispatch","a","axios","get","data","tracks","post","useEffect","as","Content","DetailsCard","title","Card","header","description","fetchingSelectedTrack","selectedTrack","Message","initialState","undefined","store","createStore","action","compose","applyMiddleware","thunk","App","Container","Grid","columns","divided","Column","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f1f76ff.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const SELECT_TRACK = 'SELECT_TRACK';\nexport const FETCH_TRACK_LIST = 'FETCH_TRACK_LIST';\nexport const FETCH_TRACK_LIST_SUCCESS = 'FETCH_TRACK_LIST_SUCCESS';\nexport const FETCH_SELECTED_TRACK = 'FETCH_SELECTED_TRACK';\nexport const FETCH_SELECTED_TRACK_SUCCESS = 'FETCH_SELECTED_TRACK_SUCCESS';\n\nconst fetchTrackListSuccess = tracks => ({\n    type: FETCH_TRACK_LIST_SUCCESS,\n    payload: tracks\n});\n\nconst fetchSelectedTrackSuccess = track => ({\n    type: FETCH_SELECTED_TRACK_SUCCESS,\n    payload: track\n})\n\nexport const selectTrack = id => async dispatch => {\n    dispatch({ type: SELECT_TRACK, payload: id });\n    dispatch({ type: FETCH_SELECTED_TRACK });\n    \n    const track = (await axios.post('/track', { id })).data.track;\n    return dispatch(fetchSelectedTrackSuccess(track));\n}\n\nexport const parseTracks = tracksObj => {\n    return Object.keys(tracksObj).map(key => ({ id: key, ...tracksObj[key]}));\n}\nexport const fetchTrackList = () => async dispatch => {\n    dispatch({ type: FETCH_TRACK_LIST })\n    const trackList = (await axios.get('/all_tracks')).data.tracks;\n    return dispatch(fetchTrackListSuccess(parseTracks(trackList)));\n}","import React from 'react';\nimport { Segment, Dimmer, Loader } from 'semantic-ui-react';\n\nconst SpinnerSection = () => (\n    <Segment data-testid=\"spinner\" padded>\n        <Dimmer active inverted><Loader /></Dimmer>\n    </Segment>\n);\n\nexport default SpinnerSection;\n","import React, { Fragment, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Header } from 'semantic-ui-react';\nimport { fetchTrackList, selectTrack } from './store/actions';\nimport SpinnerSection from './SpinnerSection';\n\nexport const TrackTable = ({ trackList, selectedTrackId, selectTrack }) => (\n    <Table celled padded data-testid=\"track-table\">\n        <Table.Header>\n        <Table.Row>\n            <Table.HeaderCell>#</Table.HeaderCell>\n            <Table.HeaderCell>Title</Table.HeaderCell>\n            <Table.HeaderCell>Artist</Table.HeaderCell>\n        </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n        { trackList.map(({ id, artist, track_title }) => (\n            <Table.Row className=\"track-row\" key={id} active={selectedTrackId === id} onClick={() => selectTrack(id)}>\n                <Table.Cell>{ id }</Table.Cell>\n                <Table.Cell>{ artist }</Table.Cell>\n                <Table.Cell>{ track_title }</Table.Cell>\n            </Table.Row>\n        ))}\n        </Table.Body>\n    </Table>\n);\n\nconst TrackList = ({ fetchTrackList, fetching, trackList, selectTrack, selectedTrackId }) => {\n    useEffect(() => {\n        fetchTrackList();\n    }, [fetchTrackList]);\n\n    return (\n        <Fragment>\n            <Header as='h2'>\n                <Header.Content>\n                Tracks\n                </Header.Content>\n            </Header>\n            { fetching ? <SpinnerSection /> : (\n            <TrackTable trackList={trackList} selectedTrackId={selectedTrackId} selectTrack={selectTrack} />\n            )}\n        </Fragment>\n    )\n}\n\nconst mapStateToProps = state => ({\n    fetching: state.fetchingTrackList,\n    trackList: state.trackList,\n    selectedTrackId: state.selectedTrackId\n})\n\nexport default connect(mapStateToProps, { fetchTrackList, selectTrack })(TrackList);","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux'\nimport { Header, Message, Card } from 'semantic-ui-react';\nimport SpinnerSection from './SpinnerSection';\n\nconst DetailsCard = ({ artist, title }) => (\n    <Card data-testid=\"details-card\">\n        <Card.Content header={title} />\n        <Card.Content description={`by ${artist}`} />\n    </Card>\n);\n\nconst TrackDetails = ({ fetchingSelectedTrack, selectedTrack }) => (\n    <Fragment>\n        <Header as='h2'>\n            <Header.Content>\n                Details\n            </Header.Content>\n        </Header>\n        { fetchingSelectedTrack && <SpinnerSection />}\n        { !selectedTrack \n            ? <Message data-testid=\"info-message\" className=\"info-message\">Select a track to view its details</Message> \n            : <DetailsCard artist={selectedTrack.artist} title={selectedTrack.track_title}/>\n        }\n    </Fragment>\n)\n\nconst mapStateToProps = state => ({\n    selectedTrackId: state.selectedTrackId,\n    fetchingSelectedTrack: state.fetchingSelectedTrack,\n    selectedTrack: state.selectedTrack,\n})\nexport default connect(mapStateToProps)(TrackDetails);","import { createStore, applyMiddleware, compose } from 'redux';\nimport {\n    SELECT_TRACK,\n    FETCH_TRACK_LIST,\n    FETCH_TRACK_LIST_SUCCESS,\n    FETCH_SELECTED_TRACK,\n    FETCH_SELECTED_TRACK_SUCCESS\n} from './actions';\nimport thunk from 'redux-thunk';\n\nexport const initialState = {\n    fetchingTrackList: false,\n    trackList: [],\n    selectedTrackId: undefined,\n    fetchingSelectedTrack: false,\n    selectedTrack: undefined,\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SELECT_TRACK:\n            return { ...state, selectedTrackId: action.payload }\n        case FETCH_TRACK_LIST: \n            return { ...state, fetchingTrackList: true }\n        case FETCH_TRACK_LIST_SUCCESS:\n            return { ...state, trackList: action.payload, fetchingTrackList: false }\n        case FETCH_SELECTED_TRACK:\n            return { ...state, fetchingSelectedTrack: true }\n        case FETCH_SELECTED_TRACK_SUCCESS:\n            return { ...state, selectedTrack: action.payload, fetchingSelectedTrack: false }\n        default:\n            return state;\n    }\n\n}\nconst store = createStore(\n    reducer, \n    compose(\n        applyMiddleware(thunk)\n    )\n  );\nexport default store;","import React from 'react';\nimport TrackList from './TrackList';\nimport TrackDetails from './TrackDetails';\nimport { Grid, Container, Header } from 'semantic-ui-react';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Container className=\"padded-container\">\n        <Header  as='h1'>Music Tracks Demo App</Header>\n        <Grid columns={2} divided>\n          <Grid.Row>\n            <Grid.Column>\n              <TrackList />\n            </Grid.Column>\n            <Grid.Column>\n              <TrackDetails />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}